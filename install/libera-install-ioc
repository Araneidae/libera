#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2005-2009 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# This script is copied into $INSTALL_HOST and should be run in place on the
# IOC to ensure that the appropriate files are copied into place.
#
# This installation script supports two modes of operation of the installed
# IOC: testing (installed on the remote file system) or final (copied to the
# local file system).


# Set the EPICS_ARCH and CONFIGDIR variables
SOURCE="$(cd "$(dirname "$0")"/..; pwd)"
. "$SOURCE"/scripts/architecture

LOCATIONS="$(cat "$SOURCE"/install/locations)"



# Parse local installation options
TARGET=none
AUTOSTART=false
STARTNOW=false
REMOUNT_RW=false
while getopts 'ftlaswh' option; do
    case "$option" in
    f)  TARGET=final ;;
    t)  TARGET=test ;;
    a)  AUTOSTART=true ;;
    l)  echo 'The -l option is obsolete: use -a'
        AUTOSTART=true ;;
    s)  STARTNOW=true ;;
    w)  REMOUNT_RW=true ;;
    h)  echo -n 'Usage: libera-install-ioc <options>'
        if [ -n "$LOCATIONS" ]; then echo ' <location>'; else echo; fi
        cat <<'EOF'
where <options> includes
    -f  Final install: copy files to local /opt directory
    -t  Testing install: don't copy files, use from configured location
    -a  Enable autostart via /etc/init.d/libera-driver script.
    -s  Start IOC after installation
    -w  Remount ro rootfs rw if necessary
EOF
        [ -n "$LOCATIONS" ]  &&  cat <<EOF
and <location> is a two character location code used to configure location
specific settings, one of $(echo -n $LOCATIONS).

EOF
        cat <<'EOF'
If /etc/init.d/libera is found it will be renamed to /etc/init.d/old-libera
and a new /etc/init.d/libera-driver script will always be installed.
EOF
        exit 0 ;;
    *)  Error 'Invalid option: try -h for help' ;;
    esac
done
shift $((OPTIND - 1))
[ $TARGET == none ]  &&
    Error 'Specify installation option.  Try -h for help.'

# Read the location code, but only if it's actually required!  The set of
# location codes is determined by a simple pattern match: if this set is
# empty then no location needs to be specified, otherwise the code should be
# one of these patterns.
if [ -n "$LOCATIONS" ]; then
    [ $# -gt 0 ]  ||  Error "Must specify a location, one of:" $LOCATIONS
    LOCATION="$1"
    shift
    # Check the location given is one of the ones we know
    echo "$LOCATIONS" | grep "^$LOCATION\$" >/dev/null  ||
        Error "Invalid location $LOCATION: use one of" $LOCATIONS
fi

[ $# -ne 0 ]  &&
    Error 'Invalid arguments: try -h for help'


# Check whether we can write to the filesystem.
if grep -qE ' / [^ ]* ro(,| )' /proc/mounts; then
    # Root is mounted read only.  Bail unless remount requested.
    if $REMOUNT_RW; then
        mount -o remount,rw /  ||
            Error 'Unable to remount rootfs for writing'
        trap 'mount -o remount,ro /' EXIT
    else
        Error 'Rootfs is mounted read-only.  Try -w option'
    fi
fi


# Make sure the libera driver isn't running: we need to stop everything, as
# we need to restart the clock daemon.
if [ -x /etc/init.d/libera-driver ]; then
    /etc/init.d/libera-driver stop
elif [ -x /etc/init.d/libera ]; then
    # Ensure epics driver isn't running at the moment.
    if [ -e /var/run/ioc.pid ]; then
        /etc/init.d/epics stop
    fi  &&
    /etc/init.d/libera stop  &&
    mv /etc/init.d/libera /etc/init.d/old-libera
fi  ||
    Error 'Error stopping drivers.  Installation aborted'

# Also kill the health daemon if it's running.  Don't care so much if this
# gives us trouble.
[ -x /etc/init.d/healthd ]  &&  /etc/init.d/healthd stop


# If the target is an old Libera ensure that libstdc++.so.6 is installed: this
# wasn't part of the standard distribution for 1.46, and is required by this
# driver.
if [ "$ROOTFS_ARCH" == ITECH-v0 -a ! -e /lib/libstdc++.so.6 ]; then
    LIBC_SO="$(echo -n "$SOURCE"/install/libstdc++.so.6.*)"
    if [ -f "$LIBC_SO" ]; then
        echo Installing /lib/libstdc++.so.6
        cp "$LIBC_SO" /lib  &&
        ln -s "$(basename "$LIBC_SO")" /lib/libstdc++.so.6  ||
            Error Error installing /lib/libstdc++.so.6
    else
        Error Unable to install /lib/libstdc++.so.6, not found.
    fi
fi


# If final installation selected then copy over all the run-time files and
# update the configuration file to point to them.
if [ $TARGET == final ]; then
    # Hard-wired targets on local file system
    IOC_TARGET=/opt/ioc
    STATE_DIR=/opt/state

    # Ensure the state directory exists (but don't interfere with it!)
    mkdir -p "$STATE_DIR"  

    # Copy over all the runtime files.  First make sure the target directory
    # is fresh.
    rm -rf "$IOC_TARGET"  
    umask 22  
    mkdir -p "$IOC_TARGET" "$IOC_TARGET"/bin
    for dir in dbd db bin/$EPICS_ARCH scripts; do
        cp -r "$SOURCE/$dir" "$IOC_TARGET/$dir"
    done
else
    # Compute EPICS and IOC paths relative to this directory.  
    PARENT="$(cd "$SOURCE/.."; pwd)"
    IOC_TARGET="$PARENT/ioc"
    # Check that the parent directory contains the right files!
    [ "$IOC_TARGET" = "$SOURCE" ] ||
        Error "Inconsistent test installation environment"
fi  

# Now install the epics_ioc file.
(
    # Add on the paths required for running the IOC
    echo "LIBERA_IOC='$IOC_TARGET'"
    echo "EPICS_ARCH=$EPICS_ARCH"
    echo "ROOTFS_ARCH=$ROOTFS_ARCH"
    # We want to process three types of lines appropriately:
    #  1. Lines starting $LOCATION_IOC_... are translated to IOC_...
    #  2. Lines starting XX_IOC_... are discarded
    #  3. Lines starting IOC_ are passed through unchanged
    #  4. All other lines are discarded
    sed -r '
        s/^'"$LOCATION"'_(IOC_)/\1/
        /^IOC_/! d
        ' "$SOURCE"/install/CONFIG
    # If libera autostart is configured then add the appropriate entry
    $AUTOSTART  &&  echo 'START_EPICS=yes'
) > $CONFIGDIR/epics_ioc

# Copy over the startup scripts substituting in the hard-wired CONFIGDIR value
# we've determined.
for f in libera-driver epics healthd; do
    sed s:@@CONFIGDIR@@:"$CONFIGDIR": "$SOURCE"/install/$f \
        >/etc/init.d/$f
    chmod +x /etc/init.d/$f
done


# Configure autostart as required.  First clear out any existing autostart
# method, then install the chosen one.  Either we start epics separately from
# libera, or we invite the libera script to start/stop us at the same time.
rm -f $CONFIGDIR/libera-server  
rm -f /etc/init.d/libera-server
# Do our best to remove all prior traces from rc*.d without accidentially
# removing anything else!
for script in libera healthd epics libera-driver; do
    for nn in '??' '???'; do
        eval rm -f '/etc/rc*.d/[S,K]'$nn$script
    done
done

# On Libera 1.46 we have to take special precautions to disable the old
# health daemon.  This is started by the /etc/init.d/i2c script which we
# don't want to change, so instead we replace the healthd.sh script it runs.
#     We replace it with a link, so we can know not to do it again!
if [ "$ROOTFS_ARCH" = ITECH-v0 -a ! -h /opt/bin/healthd.sh ]; then
    mv /opt/bin/healthd.sh /opt/bin/healthd.sh.old
    ln -s /bin/true /opt/bin/healthd.sh
    kill $(ps ho pid -C healthd.sh)
fi


# Figure out the run level.  Basically looking for line of the form
#   xx:<run-level>:initdefault:
# The DLS rootfs doesn't use runlevels, but that doesn't matter, as in the
# end the target is still /etc/rc$RUNLEVEL.d/
RUNLEVEL="$(
    sed -rn '/^[^#][^:]*:([^:]*):initdefault:.*/{s//\1/;p;}' /etc/inittab)"
RCD=/etc/rc$RUNLEVEL.d

ln -fs ../init.d/healthd $RCD/S800healthd
ln -fs ../init.d/libera-driver $RCD/S801libera-driver


if $STARTNOW; then
    /etc/init.d/healthd start
    /etc/init.d/libera-driver start
    $AUTOSTART  ||  /etc/init.d/epics start
fi
