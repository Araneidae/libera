#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2005-2007 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# This script is copied into $INSTALL_HOST and should be run in place on the
# IOC to ensure that the appropriate files are copied into place.
#
# This installation script supports two modes of operation of the installed
# IOC: testing (installed on the remote file system) or final (copied to the
# local file system).

# Abort on first failure
set -e

function Error()
{
    echo >&2 "$@"
    exit 1
}



# Ensure this isn't run by accident on the development machine.
[ "$(uname -m)" != armv5tel ]  &&
    Error This should be run on Libera

# The following version checking code is also present, in a similar form, in
# libera-driver and similar tests need to be done in epics and runioc.  In
# each case the goal is to avoid branching the code while both versions of
# target are supported.
LINUX_VERSION="$(uname -r | sed -r 's/(^[^.]*\.[^.]*)\..*/\1/')"
if [ -d /etc/sysconfig ]; then
    # Old school Libera
    NEW_LIBERA=0
    EXPECT_VERSION=2.4
    CONFIGDIR=/etc/sysconfig
else
    # Newer Libera
    NEW_LIBERA=1
    EXPECT_VERSION=2.6
    CONFIGDIR=/etc/default
fi
if [ "$EXPECT_VERSION" != "$LINUX_VERSION" ]; then
    echo Expected Linux version "$EXPECT_VERSION", found "$LINUX_VERSION"
    exit 1
fi


SOURCE="$(cd "$(dirname "$0")"/..; pwd)"

LOCATIONS="$(cat "$SOURCE"/install/locations)"


# Parse local installation options
TARGET=none
AUTOSTART=0
STARTNOW=0
while getopts 'ftlash' option; do
    case "$option" in
    f)  TARGET=final ;;
    t)  TARGET=test ;;
    a)  AUTOSTART=1 ;;
    l)  echo 'The -l option is obsolete: use -a'
        AUTOSTART=1 ;;
    s)  STARTNOW=1 ;;
    h)  echo -n 'Usage: libera-install-ioc <options>'
        if [ -n "$LOCATIONS" ]; then echo ' <location>'; else echo; fi
        cat <<'EOF'
where <options> includes
    -f  Final install: copy files to local /opt directory
    -t  Testing install: don't copy files, use from configured location
    -a  Enable autostart via /etc/init.d/libera-driver script.
    -s  Start IOC after installation
EOF
        [ -n "$LOCATIONS" ]  &&  cat <<EOF
and <location> is a two character location code used to configure location
specific settings, one of $(echo -n $LOCATIONS).

EOF
        cat <<'EOF'
If /etc/init.d/libera is found it will be renamed to /etc/init.d/old-libera
and a new /etc/init.d/libera-driver script will always be installed.
EOF
        exit 0 ;;
    *)  Error 'Invalid option: try -h for help' ;;
    esac
done
shift $((OPTIND - 1))
[ $TARGET == none ]  &&
    Error 'Specify installation option.  Try -h for help.'

# Read the location code, but only if it's actually required!  The set of
# location codes is determined by a simple pattern match: if this set is
# empty then no location needs to be specified, otherwise the code should be
# one of these patterns.
if [ -n "$LOCATIONS" ]; then
    (($# > 0))  ||  Error "Must specify a location, one of:" $LOCATIONS
    LOCATION="$1"
    shift
    # Check the location given is one of the ones we know
    echo "$LOCATIONS" | grep "^$LOCATION\$" >/dev/null  ||
        Error "Invalid location $LOCATION: use one of" $LOCATIONS
fi

(($# != 0))  &&
    Error 'Invalid arguments: try -h for help'



# Make sure the libera driver isn't running: we need to stop everything, as
# we need to restart the clock daemon.
if [ -x /etc/init.d/libera-driver ]; then
    /etc/init.d/libera-driver stop
elif [ -x /etc/init.d/libera ]; then
    # Ensure epics driver isn't running at the moment.
    if [ -e /var/run/ioc.pid ]; then
        /etc/init.d/epics stop
    fi
    /etc/init.d/libera stop
    mv /etc/init.d/libera /etc/init.d/old-libera
fi


# If final installation selected then copy over all the run-time files and
# update the configuration file to point to them.
if [ $TARGET == final ]; then
    # Hard-wired targets on local file system
    IOC_TARGET=/opt/ioc
    STATE_DIR=/opt/state

    # Ensure the state directory exists (but don't interfere with it!)
    mkdir -p "$STATE_DIR"  

    # Copy over all the runtime files.  First make sure the target directory
    # is fresh.
    rm -rf "$IOC_TARGET"  
    umask 22  
    mkdir -p "$IOC_TARGET"  
    for dir in bin dbd db; do
        cp -r "$SOURCE/$dir" "$IOC_TARGET"
    done
else
    # Compute EPICS and IOC paths relative to this directory.  
    PARENT="$(cd "$SOURCE/.."; pwd)"
    IOC_TARGET="$PARENT/ioc"
    # Check that the parent directory contains the right files!
    [ "$IOC_TARGET" = "$SOURCE" ] ||
        Error "Inconsistent test installation environment"
fi  

# Now install the epics_ioc file.
(
    # Add on the paths required for running the IOC
    echo "LIBERA_IOC='$IOC_TARGET/bin/linux-arm/runioc'"
    # We want to process three types of lines appropriately:
    #  1. Lines starting $LOCATION_IOC_... are translated to IOC_...
    #  2. Lines starting XX_IOC_... are discarded
    #  3. Lines starting IOC_ are passed through unchanged
    #  4. All other lines are discarded
    sed -r '
        s/^'"$LOCATION"'_(IOC_)/\1/
        /^IOC_/! d
        ' "$SOURCE"/install/CONFIG
    # If libera autostart is configured then add the appropriate entry
    ((AUTOSTART))  &&  echo 'START_EPICS=yes'
) > $CONFIGDIR/epics_ioc

# Copy the startup scripts
cp -f "$SOURCE"/install/libera-driver /etc/init.d  
cp -f "$SOURCE"/install/epics /etc/init.d  


# Configure autostart as required.  First clear out any existing autostart
# method, then install the chosen one.  Either we start epics separately from
# libera, or we invite the libera script to start/stop us at the same time.
rm -f /etc/rc3.d/S900epics /etc/rc6.d/K100epics  
rm -f $CONFIGDIR/libera-server  
rm -f /etc/init.d/libera-server

rm -f /etc/rc*.d/*libera

for rcd in 2.d/S800 3.d/S800 0.d/K100 1.d/K100 6.d/K100; do
    ln -fs ../init.d/libera-driver /etc/rc${rcd}libera-driver
done

if ((STARTNOW)); then
    /etc/init.d/libera-driver start
    ((AUTOSTART))  ||  /etc/init.d/epics start
fi
