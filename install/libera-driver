#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2005 Instrumentation Technologies
# Copyright (C) 2008-2009 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# libera - Start/stop Libera (FPGA design, driver & PLL daemon).

# Pick up the Libera configuration
CONFIGDIR='@@CONFIGDIR@@'
. $CONFIGDIR/libera
. $CONFIGDIR/epics_ioc
. "$LIBERA_IOC"/scripts/epics-functions

# Figure out the firmware version.
case $ROOTFS_ARCH in
    ITECH-v0)   NEW_LIBERA=false ;;
    *)          NEW_LIBERA=true ;;
esac


# Validate the configuration
: "${DESIGN:?}"             # Path to FPGA design.
: "${FLMCDHZ:?}"            # Machine clock frequency in dHz (10^-1 Hz)
: "${FREV:?}"               # Machine revolution frequency in Hz
: "${MCPRESC:?}"            # Machine clocks per machine clock PLL interrupt
: "${NCLK_ADC:?}"           # Number of times shift enable written(?)
: "${HARMONIC:?}"           # Number of bunches per machine revolution
: "${NTBT:?}"               # Number of turns per switch position
: "${IL_K_CORR_ADC_LIMIT:?}"        # ADC interlock overflow filter scaling
: "${IL_MAX_ADC_OVERFLOW_DUR:?}"    # factor and duration limit
: "${LIBERA_IOC}"           # Path to EPICS IOC
if $NEW_LIBERA; then
    : "${POSTMORTEM_BUFFER:?}"  # Length of PM buffer
fi


case "$1" in
    start)
        # First load the FPGA design
        echo -n "Loading FPGA design..."
        /opt/bin/fp < $DESIGN
        evaluate_retval

        # Initialize FPGA design
        echo -n "Initializing FPGA design..."
        /opt/bin/fpga_init $NCLK_ADC > /dev/null
        evaluate_retval

        # Load MSP driver
        echo -n "Loading MSP driver..."
        modprobe msp
        evaluate_retval

        # Load the driver with proper parameters.  The parameters depend on
        # which version we're running, though.
        echo -n "Loading Libera driver..."
        if $NEW_LIBERA; then
            DEV_PARAMS="pmsize=$POSTMORTEM_BUFFER"
        else
            DFA=$(($(read_register 0x14) & 0xFFFF)) # Turns per FA from FPGA
            DEV_PARAMS="d=$DECIMATION dfa=$DFA"
        fi
        modprobe libera \
            flmcdHz=$FLMCDHZ \
            kadc=$IL_K_CORR_ADC_LIMIT ilkdur=$IL_MAX_ADC_OVERFLOW_DUR \
            $DEV_PARAMS
        evaluate_retval

        # Start the clock PLL daemon from the same directory as the EPICS IOC
        DECIMATION=$(read_register 0x10)    # Samples per turn from FPGA
        echo -n "Loading clock PLL daemon..."
        "$LIBERA_IOC"/bin/$EPICS_ARCH/clockPll \
            -p$MCPRESC -d$DECIMATION -r$HARMONIC
        evaluate_retval

        # Optionally start the EPICS IOC
        [ "$START_EPICS" = yes ]  && /etc/init.d/epics start
        ;;

    stop)
        # Stop the EPICS IOC if it's running
        [ -e /var/run/ioc.pid ]  &&  /etc/init.d/epics stop

        # Kill the clock daemon
        if [ -e /var/run/clockPll.pid ]; then
            echo -n "Killing clock PLL daemon..."
            kill $(cat /var/run/clockPll.pid)
            evaluate_retval
        fi

        # Remove Libera driver.  We need to keep trying, as earlier processes
        # can end up taking quite a long time to go away at this point...
        echo -n "Removing Libera driver..."
        i=0; while [ $i -lt 10 ]; do
            sleep 0.5
            modprobe -r libera  &&  break
            i=$((i+1))
        done
        evaluate_retval

        # Remove MSP driver
        echo -n "Removing MSP driver..."
        modprobe -r msp
        evaluate_retval
        ;;

    restart)
        $0 stop
        sleep 1
        $0 start
        ;;
        
    *)  echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac
