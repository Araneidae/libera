#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2009 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# Starts or stops health daemon
# This file should be placed in /etc/init.d


# Hard-wired panic temperatures for health daemon.  If the temperature is
# above either of these temperatures then the FPGA will be placed in low
# power mode and the health daemon is not started.
MAX_RF_TEMP=75
MAX_MB_TEMP=65


CONFIGDIR='@@CONFIGDIR@@'
. $CONFIGDIR/epics_ioc
. "$LIBERA_IOC"/scripts/epics-functions

HEALTHD="$LIBERA_IOC"/bin/$EPICS_ARCH/healthd


# Reads the temperature from the given I2C sensor device, returning the
# temperature in degrees.  Works on both with and without sysfs, so can work
# on 2.4 and 2.6 kernels.
#
#   read_temperature <sensor-number>
#
read_temperature()
{
    if [ -e /sys ]; then
        RAW_TEMP="$(cat /sys/bus/i2c/devices/0-00$1/temp1_input)"  &&
        echo ${RAW_TEMP%%000}
    else
        RAW_TEMP="$(cat /proc/sys/dev/sensors/*-$1/temp1)"  &&
        echo "${RAW_TEMP%% *}"
    fi
}

# Checks motherboard temperature and RF board temperature (if available),
# returning failure if either is over temperature.
check_health()
{
    if detect_brilliance; then
        TEMP="$(read_temperature 18)"  &&
        [ "$TEMP" -lt "$MAX_RF_TEMP" ]
    fi  &&
    TEMP="$(read_temperature 29)"  &&
    [ "$TEMP" -lt "$MAX_MB_TEMP" ]
}


# Perform sanity check on temperature.  If temperature is too high then just
# bail out right now and force the FPGA into power-down mode.  The healthd
# command pipe is used as a health daemon status flag.
rm -f /tmp/healthd.command
if ! check_health; then
    echo "Powering down FPGA"
    /opt/bin/fp </opt/lib/powerdown.bin
    Error "Health daemon not started"
fi


case "$1" in
    start)
        echo -n "Starting health daemon..."
        if [ -e /var/run/healthd.pid ]; then
            echo -n " - already running?"
            print_status failure
        else
            # Choose temperature sensor and target according to whether
            # Brilliance or Electron RF hardware is detected.
            if detect_brilliance; then
                OPTS="-E -T$IOC_TEMP_RF"
            else
                OPTS="-M -T$IOC_TEMP_MB"
            fi
            OPTS="$OPTS -m$MAX_MB_TEMP -e$MAX_RF_TEMP $IOC_HEALTHD_OPTS"
            
            if [ -z "$IOC_HEALTHD_PANIC" ]; then
                "$HEALTHD" $OPTS
            else
                "$HEALTHD" -x"$IOC_HEALTHD_PANIC" $OPTS 
            fi
            evaluate_retval
        fi
        ;;

    stop)
        if [ -e /var/run/healthd.pid ]; then
            echo -n "Stopping health daemon..."
            kill $(cat /var/run/healthd.pid)
            evaluate_retval
        fi
        ;;

    restart)
        "$0" stop
        sleep 1
        "$0" start
        ;;

    *)  echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac
