#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2005-2011 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# Generates notch filter files /opt/lib/notch1 and /opt/lib/notch2 by
# scanning /opt/bin/fpga_init_specific.  If these files already exist and -f
# is not specified then nothing is done.

Error() { echo >&2 "$@"; exit 1; }

# Sign extension hack.  Relies on 64 bit arithmetic in our shell, which is what
# we appear to have in all our Liberas.
sign_extend() { echo $((($1 << 32) >> 32)); }
# Check that our sign extension hack works in this shell.
[ $(sign_extend 0x89ABCDEF) = -1985229329 ]  ||
    Error Unable to convert notch filters


if [ -e /opt/lib/notch1 -a -e /opt/lib/notch2 -a \
     -e /opt/lib/polyphase_fir -a "$1" != -f ]; then
    echo Notch filters already present, not overwriting
    exit 0
fi


# Reads coefficients for specified address from FPGA initialisation file.
# This unfortunately relies hugely on the FPGA initialisation file being in a
# very specific format, so this is embarassingly fragile.
read_filter()
{
    ADDR=$(printf "0x%08X" $((0x1401C000 + $1)))
    cat /opt/bin/fpga_init_specific |
    sed -n "/^.*Monitor $ADDR w /{s///;p;}" |
    while read; do
        # Convert hex value into signed integer value as required by Libera.
        sign_extend $REPLY
    done
}

# If a notch filter isn't exactly five lines then we've messed up.
check_notch()
{
    if [ $(wc -l <$1) != 5 ]; then
        rm -f $1
        Error "Invalid notch file read"
    fi
}


read_filter 0x18 >/opt/lib/notch1
check_notch /opt/lib/notch1

read_filter 0x1C >/opt/lib/notch2
check_notch /opt/lib/notch2

read_filter 0x14 >/tmp/polyphase_fir

# For some mysterious reason the FIR coefficients need to be rearranged: they
# are loaded out of order, and this needs to be undone for the generated FIR
# file.  At least we can do a few extra checks...
lines=$(wc -l </tmp/polyphase_fir)
if [ $(((lines % 3))) != 0  -o  $((lines)) == 0 ]; then
    Error "Invalid FIR file read"
fi

n=$((lines/3))
{
    sed -n "$((2*n+1)),$((3*n))p" /tmp/polyphase_fir
    sed -n "$((n+1)),$((2*n))p" /tmp/polyphase_fir
    sed -n "1,${n}p" /tmp/polyphase_fir
} >/opt/lib/polyphase_fir
