#!/bin/sh

# This file is part of the Libera EPICS Driver,
# Copyright (C) 2005-2009 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# Automates the generation of a new Libera release.

function Error()
{
    echo >&2 "$@"
    exit 1
}

# Checks that the given directory is completely in step with svn.  Unknown
# files (flagged by ?) are ignored.
#
#   CheckSvnCurrent <working-dir>
#
function CheckSvnCurrent()
{
    svn status -u "$1" |
    # We ignore both lines beginning with '?' (these are files that haven't
    # been added: it can be a bit much to insist on adding these) and the
    # 'Status against revision' line that comes from the -u flag.
    sed '/^\?/d
        /^Status against revision:/d
        /^$/d' |
    wc -l |
    { read count && ((count == 0)); }
    # Return success only if the svn status command succeeded and no lines
    # were reported as unresolved.
    ((${PIPESTATUS[0]}==0 && ${PIPESTATUS[3]}==0))
}



# We have to separate the release path from the SVN_ROOT because the builder
# has a different SVN_ROOT configured!
RELEASE_PATH="diamond/release/ioc/Libera"

SVN_TRUNK="$SVN_ROOT/diamond/trunk/ioc/Libera"
SVN_RELEASE="$SVN_ROOT/$RELEASE_PATH"

# This is where the released software will be finally published and built.
PROD_ROOT="/dls_sw/prod/R3.14.9/ioc/Libera"


cd "$(dirname "$0")/.."


# First check that we're publishing the version we expect.
VERSION="$(sed -n '/^VERSION=/{s///;p;q;}' install_d/CONFIG)"
[ "$VERSION" = "${1?Specify release version}" ]  ||
    Error "Release version mismatch: $1 != $VERSION"

# Check the version doesn't already exist!
svn ls "$SVN_RELEASE/$VERSION"  >/dev/null 2>&1  &&
    Error "Release $VERSION already published to subversion"

# Check that we're up to date with subversion.  
CheckSvnCurrent . ||
    Error "Libera files not checked in"

    
# Make the release into subversion.  
svn cp -m "Libera: Release $VERSION" "$SVN_TRUNK" "$SVN_RELEASE/$VERSION" ||
    Error "Problem making subversion release"


# Now build the released version into the production area.  This has to be
# done by the release builder, so we prepare its instructions here.

QUEUE_DIR=/dls_sw/work/etc/build/queue
RELEASE_JOB=Release-Libera-$VERSION.sh

# Create the release job as a hidden file (so the builder doesn't start it
# prematurely) and then rename it make it happen.
cd "$QUEUE_DIR"  &&
cat <<EOF  >.$RELEASE_JOB  &&
cd "$PROD_ROOT"  &&
svn co "\$SVN_ROOT/$RELEASE_PATH/$VERSION"  &&
cd $VERSION  &&
make >build.log 2>build.log.err
EOF
mv .$RELEASE_JOB $RELEASE_JOB  &&
echo Job $RELEASE_JOB scheduled for build  ||
    Error "Problem building final release"
