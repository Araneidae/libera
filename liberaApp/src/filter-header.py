# This file is part of the Libera EPICS Driver,
# Copyright (C) 2008  Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# Python script to compute low pass filter.

from __future__ import division

from numpy import *
import math


print '/* Filter definition for raw ADC filtering.'
print ' * Automatically generated by filter-header.py. */'


def ConvolveSequence(*s):
    result = array(s[0], dtype = float)
    for a in s[1:]:
        result = convolve(result, array(a, dtype = float))
    return result


# Low pass filter
filter = ConvolveSequence([1, 1],
    *[[1, 2 * cos(theta), 1] for theta in [pi/6, 2*pi/6, pi/2]])

# Scale the filter so that its values are in the range 0..2**16 (the filter
# is entirely positive).  Given signed 16-bit input values the product at
# each point fits in a signed 32-bit integer.
filter = int_(filter / max(abs(filter)) * 2**16)

print
print 'static const int %s[%d] =' % ('FilterADC', len(filter))
print '{'
for x in filter:
    print '    %d,' % x
print '};'
print

filter_sum = sum(filter)
print '/* Filter sum = %d = 2**%g. */' % (filter_sum, math.log(filter_sum, 2))
