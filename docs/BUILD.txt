Libera EPICS driver version 2.05, for use with Libera drivers version 1.46,
1.60, 1.82 and 2.xx.


BUILD INSTRUCTIONS

Building this software depends on the following components:

 * ARM cross compiler toolchain.  Two main architectures are targeted (old)
   ABI for Libera versions before 2.00, and new EABI for 2.00 and after.
   Different toolchain versions are needed for these two incompatible
   architectures.

 * EPICS 3.14 base.  This version of the software has been developed using 
   version 3.14.11 of EPICS, which can be downloaded from 
        http://www.aps.anl.gov/epics/base/R3-14/11.php
   For versions 3.14.6, 3.14.7 and 3.14.8.2 the included patches
   will need to be applied to ensure that linux-arm support is provided.
   EPICS version 3.14.9 and 3.14.11 can be used without applying any patches.

 * A working Libera system.  To run the driver a complete Libera system must
   be used together with the full Libera distribution.  Libera can be obtained
   from Instrumentation Technologies at: http://www.i-tech.si.  At least
   version 1.46 must be installed for the EPICS driver to work.


The instructions below are divided into the following stages:

 1. Preparation
 2. Obtaining or building the Cross Compiler Tool Chain
 3. Building EPICS for the selected target architecture.
 4. Building the Libera EPICS driver
 5. Preparing Libera for EPICS installation
 6. Installing the Libera EPICS driver
 7. Running the Libera EPICS driver



Preparation
===========

A number of file locations will need to be defined before installing this
software, both on the development system (assumed to be Linux) and on the
target Libera machine.  These are identified through this document by the
symbols below.

Directories on development machine:

LIBERA_EPICS    Root of this distribution as extracted
ARM_GCC         Root of gcc cross compiler
EPICS_BASE      Root of epics base distribution
INSTALL_HOST    Where to build the installation

The $INSTALL_TARGET directory on the target machine is assumed to contain the
same files as $INSTALL_HOST.  It is assumed in this document that this is done
through an NFS mount on Libera, for example /mnt/nfs/Libera.

INSTALL_TARGET  Where to find installation files on Libera.  

Other symbols:

EPICS_VERSION   Any of 3.14.6 to 3.14.11 for this release (though earlier
                versions haven't been tested recently).
ARM_GCC_PREFIX  Compiler prefix: see notes on toolchain below.


The instructions below assume that you have already extracted
libera-epics-$EPICS_VERSION.tgz into $LIBERA_EPICS.

When running make the environment variable EPICS_HOST_ARCH will be assumed to
be set thus: 
    $ export EPICS_HOST_ARCH=linux-x86
This is used by the Epics environment to determine which build configuration
to use.


Start by editing $LIBERA_EPICS/install_d/CONFIG to suit your installation.
The following symbol should be defined in this file:

    INSTALL_HOST    Set to $INSTALL_HOST as described above

In all of the instructions below a line of the form
    $ command
describes a command to be run on the host build machine, and a line of the
form
    # command
describes a command to be run on Libera, when logged in as root.



Building the Cross Compiler Tool Chain
======================================

Three different Libera architectures are supported by the epics driver,
requiring three different compilers.

 * On Libera versions 1.46 to 1.82 the EPICS driver is built using gcc
   3.4.5 and glibc 2.3.6 targeting the original ARM ABI.  This architecture
   requires emulation of floating point through illegal instruction traps,
   which is rather slow.
 * On Libera 2.xx the EPICS driver is built using gcc 3.4.4 and glibc 2.3.6
   targeting the more recent EABI.  This target is binary incompatible with
   the earlier ABI, but more efficient.
 * On the DLS Libera distribution the EPICS driver is currently built using
   gcc 4.3.2 and glibc 2.7, also targeting EABI.

The target architecture is identified to EPICS as linux-arm for the original
ABI target, and linux-arm_el for the EABI targets.


Building gcc 3.4.5/glibc 2.3.6 for ARM (old) ABI
------------------------------------------------

The cross compiler can be obtained from Instrumentation Technologies, or can
be built with the help of crosstool, available from
    http://kegel.com/crosstool/

The following process worked well for me:

1.  Download http://kegel.com/crosstool/crosstool-0.43.tar.gz and unzip.

2.  Change into the crosstool directory and run the commands below.  

    $ set -aex
    $ # These directories need to already exist
    $ TARBALLS_DIR=/scratch/crosstool/downloads
    $ RESULT_TOP=/scratch/crosstool/results
    $ # You may need to specify your web proxy server here
    $ #http_proxy=http://wwwcache.rl.ac.uk:8080/

    $ GCC_LANGUAGES=c,c++
    $ . gcc-3.4.5-glibc-2.3.6.dat
    $ . arm.dat
    $ TARGET=arm-linux
    $ ./all.sh --notest

    The last step takes quite a long time, and will automatically download
    any source files needed.  The resulting compiler toolchain will appear
    in $RESULT_TOP/gcc-3.4.5-glibc-2.3.6 .

3.  Remember 
        ARM_GCC=$RESULT_TOP/gcc-3.4.5-glibc-2.3.6/arm-linux 
        ARM_GCC_PREFIX=arm-linux
    for the next step.


Obtaining gcc 3.4.4/glibc 2.3.6 for ARM EABI
--------------------------------------------

I have not attempted to build this toolchain (as work at Diamond continues
with a newer generation, see below), but it can be extracted from
    scratchbox-toolchain-arm-linux-cs344-2.3_1.0.4_i386.deb  
which can be downloaded from
    http://scratchbox.org/debian/dists/stable/main/binary-i386/

For this compiler remember ARM_GCC as the path to the extracted compiler (you
can safely relocated to any convenient directory on your machine) and remember
ARM_GCC_PREFIX=arm-none-linux-gnueabi


Building gcc 4.3.2/glibc 2.7 for ARM EABI
-----------------------------------------

This was built using a modified version of the arm-unknown-linux-gnueabi
sample from crosstool-NG, which can be downloaded from 
    http://ymorin.is-a-geek.org/dokuwiki/projects/crosstool




Building EPICS for linux-arm
============================

The instructions below assume that you don't already have a copy of EPICS
installed, and we assume the use of any version from 3.14.6 to 3.14.11.  You
need to choose which ARM architecture to target, either linux-arm (ABI) or
linux-arm_el (EABI).  Call this ARM_ARCH in the instructions below.

1.  Install a suitable cross compiler as described above.  Let ARM_GCC
    be the root of the compiler and ARM_GCC_PREFIX be the cross-compiler
    prefix, so that GCC is available as $ARM_GCC/bin/$ARM_GCC_PREFIX-gcc.  

2.  Extract EPICS from
        http://www.aps.anl.gov/epics/download/base/baseR$EPICS_VERSION.tar.gz
    into a suitable directory.  Let EPICS_BASE be the path to the root
    directory of this distribution.

3.  If the EPICS version is earlier than 3.14.9, patch it as follows:
        $ cd $EPICS_BASE
        $ patch -p0 <$LIBERA_EPICS/install/patches/patch-epics-$EPICS_VERSION
    Note that the correct patch must be used depending on which version of
    EPICS is installed.  The linux-arm patches are fully incorporated into
    3.14.9 and beyond and do not need to be applied to this version of EPICS.

4.  Unless $ARM_GCC is /usr you will need to tell EPICS where to find
    its cross compiler by editing the site configuration file
        $EPICS_BASE/configure/os/CONFIG_SITE.linux-x86.$ARM_ARCH
    and defining 
        GNU_DIR = <expansion of ARM_GCC>
        GNU_TARGET = <expansion of ARM_GCC_PREFIX>

5.  Make sure that linux-arm is included as a cross compiler target
    architecture, by editing
        $EPICS_BASE/configure/CONFIG_SITE
    and defining 
        CROSS_COMPILER_TARGET_ARCHS = $ARM_ARCH
    Multiple target architectures can be supported by EPICS and defined on
    this line, but the Libera driver will only use the linux-arm and
    linux-arm_el targets. 

6.  Run make from $EPICS_BASE.  This will take a while...
        $ cd $EPICS_BASE
        $ make


Note that the EPICS build has library and header file dependencies including
readline and curses: these may need to be resolved before the build above is
successful.



Building the Libera EPICS driver
================================

One thing missing from this distribution is the Python library used to build
the .db files, and as yet there is no separate distribution published for
this, as it is very dependent on the Diamond environment.  The library can be
provided on request, but it will require integration work, thus pre-built .db
files are included with this distribution.

1.  Edit $LIBERA_EPICS/configure/RELEASE so that EPICS_BASE points to
    $EPICS_BASE.

2.  Edit $LIBERA_EPICS/configure/CONFIG_SITE and choose the appropriate
    architecture so that CROSS_COMPILER_TARGET_ARCHS = $ARM_ARCH, as selected
    above when building EPICS.

3.  To remove the dependency on the Python epics library, copy the prebuilt
    files from the install directory to the Db directory thus:
        $ cd $LIBERA_EPICS
        $ cp install/prebuilt/*.db liberaApp/Db

4.  If your build environment lacks Python then pre-built header files are
    also provided in the install/prebuilt directory which can be copied into
    liberaApp/src if required:
        $ cp install/prebuilt/*.h liberaApp/src

5.  Run make thus:
        $ make

6.  Copy the runtime files to $INSTALL_HOST by running
        $ ./install_d/install-ioc
    This builds the directory $INSTALL_HOST/ioc ready for installation on
    Libera.

    Note that this step is not required if the directory $LIBERA_EPICS is
    directly accessible from the Libera over NFS.




Preparing Libera for EPICS installation
=======================================

You will need to obtain the the appropriate version of the Libera SBC software
release from Instrumentation Technologies.

This EPICS driver may misbehave in obscure ways, or more usually will refuse
to start, if the wrong version of Libera software is installed.  The following
table records all current versions of the EPICS driver and the appropriate
Libera driver version to use.

    EPICS Driver (date)         Compatible Libera Drivers
    -------------------         -------------------------
    2.05.3 (2010-03-03)         1.46, 1.60, 1.82, 2.xx (+Brilliance)
    2.05.2 (2010-01-04)         1.46, 1.60, 1.82, 2.xx (+Brilliance)
    2.05   (2009-11-02)         1.46, 1.60, 1.82, 2.xx (+Brilliance)
    2.00.0 (2009-07-17)         1.46, 1.60, 1.82, 2.xx (+Brilliance)
    1.46.4 (2008-07-14)         1.46, 1.60, 1.82 (+Brilliance)
    1.46.1 (2007-09-27)         1.46
    1.40.2 (2007-06-12)         1.40, 1.42
    1.40.0 (2007-01-15)         1.40, 1.42
    0.6.3  (2006-10-03)         1.20, 1.21
    0.6.1  (2006-08-17)         1.20, 1.21
    0.5    (2006-07-07)         1.00
    0.4    (2006-03-13)         1.00
    0.2    (2006-02-06)         0.92

For accurate timestamps it is necessary to run an NTP daemon on Libera.  On
Libera 2.xx the openntp daemon is included (though it needs configuration),
but on earlier releases of Libera it is necessary to build and install your
own copy of the ntp daemon.

The process of building this is automated by the script system/ntp/build, and
the process of installing it is automated by system/ntp/install-ntpd.
However, it is not a good idea to run this on a Libera 2.00 system unless you
know what you're doing (in particular, it's probably a good idea to uninstall
openntp first, and the architecture needs to be right).

    In slightly more detail: download ntp-4.2.2p3.tar.gz (or a more recent
version as appropriate) from http://support.ntp.org and edit system/ntp/build
so that TAR_DIR points to the directory containing the downloaded file.  Also
edit system/ntp/ntp.conf so that there is a server line pointing to your local
NTP server (which should if possible also be configured to act as an rdate
server).
    Running the build script will created a directory system/ntp/install
containing all the files required to install ntp on libera.  Make this
directory visible to Libera and then run the script install/install-ntp.



Installing the Libera EPICS driver
==================================

Two modes of installation are supported:

Test    Designed for testing, files are accessed over NFS.

Final   Designed for production, files are copied to standard locations on the
        Libera IOC.

In all of the following it is assumed that the Libera IOC has access to the
contents of the directory $INSTALL_HOST as $INSTALL_TARGET, either by copying
the files onto Libera, or via a shared NFS mount point.


Test Installation
-----------------

    In this mode of installation the run-time files are accessed over NFS and
    nothing is copied onto the Libera file system.  This is useful when
    developing Libera, but is not recommended for normal operation as
    uninterrupted access to NFS is required.

    To install a Test installation run the following command on Libera:
        # $INSTALL_TARGET/ioc/install_d/libera-install-ioc -t
    (Use -h for a list of options.)

    Using the -a option ensures that the libera IOC is automatically started
    on reboot or when /etc/init.d/libera is invoked.

    Note that libera-install-ioc only needs to be run once: subsequent updates
    to the $INSTALL_HOST / $INSTALL_TARGET directory will be automatically
    picked up, as Libera is configured to run the EPICS driver directly from
    this directory.


Final Installation
------------------
    
    In this mode of installation the run-time files are copied to standard
    locations on Libera.  This mode is recommended for production use.

    In this mode the following hard wired targets are used on Libera for
    placing files:

        /opt/ioc        Location for Libera EPICS driver runtime files
        /opt/state      Location for storing persistent state

    To install the IOC files the following command is recommended:
        # $INSTALL_TARGET/ioc/install/libera-install-ioc -fasw



Running the Libera EPICS driver
===============================

The Libera EPICS IOC can be run in two ways on Libera.  Interactive operation
is possible by running the IOC file directly from the install directory:
    # $INSTALL_TARGET/ioc/runioc
This will provide an epics shell prompt.

Normal daemon operation is provided through two startup scripts:
    /etc/init.d/libera-driver       Starts and stops entire Libera system
    /etc/init.d/epics               Starts and stops EPICS IOC only

When the IOC is running as a daemon it will log all relevant activity to the
file /var/log/ioc.


Note that the IOC will take the IOC device name from the configured hostname,
thus for example if 
    # hostname
returns
    TS-DI-EBPM-01
then running
    $ caget TS-DI-EBPM-01:VERSION
should return the IOC build version.


The script $LIBERA_EPICS/opi/demoLibera will use the EPICS EDM viewer to
display $LIBERA_EPICS/opi/launcher.edl which provides access to Libera control
screens.
