# This file is part of the Libera EPICS Driver,
# Copyright (C) 2009 Michael Abbott, Diamond Light Source Ltd.
#
# The Libera EPICS Driver is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# The Libera EPICS Driver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Contact:
#      Dr. Michael Abbott,
#      Diamond Light Source Ltd,
#      Diamond House,
#      Chilton,
#      Didcot,
#      Oxfordshire,
#      OX11 0DE
#      michael.abbott@diamond.ac.uk

# This file contains common scripting functions that are intended to be
# installed on the target system.

Error()
{
    echo >&2 "$@"
    exit 1
}

# The following functions were defined in /etc/init.d/functions on Libera on
# linux 2.4, but don't seem to have equivalents in the more recent
# distribution, so we define what we need here.
evaluate_retval()
{
    if [ $? = 0 ]; then
        print_status success
    else
        print_status failure
    fi
}

: "${COLUMNS:=80}"      # Ensure COLUMNS is set
print_status()
{
    echo -n $'\033['"$((COLUMNS-10))G"
    echo -n [
    case "$1" in
        success)    echo -n $'\033[1;32m  OK  ' ;;
        failure)    echo -n $'\033[1;31mFAILED' ;;
    esac
    echo -n $'\033[0;39m'
    echo ]
}


# Reads an FPGA register
#
#   read_register <register>
#
read_register()
{
    local result
    result="$("$LIBERA_IOC"/bin/$EPICS_ARCH/monitor -d $((0x14000000+$1)))"  ||
        Error Unable to read FPGA register $1
    echo -n $((result))
}


# Writes an FPGA register
#
#   write_register <register> <value>
#
write_register()
{
    "$LIBERA_IOC"/bin/$EPICS_ARCH/monitor -W $((0x14000000+$1)) $2  ||
        Error Unable to write $2 to FPGA register $1
}


# Detects presence of Brilliance hardware, setting return code accordingly:
# zero ("success") means Brilliance temperature sensor detected.
#
#   detect_brilliance
#
detect_brilliance()
{
    # The test is very simple: the Brilliance RF board uses an adm1023
    # temperature sensor, while the motherboard uses max1617 family sensors.
    if [ -d /sys ]; then
        [ -e /sys/bus/i2c/devices/0-0018 ] && 
        [ "$(cat /sys/bus/i2c/devices/0-0018/name)" = adm1023 ]
    else
        [ -e /proc/sys/dev/sensors/adm1023-i2c-0-18 ]
    fi
}


# This routine probes the FPGA registers to try and identify the instrument
# type.  There is, unfortunately, some overlap with the functionality in
# compute-options as these process occur at different times.
probe_instrument_type()
{
    local feature=$(read_register 0x1C)
    local id=$(((feature >> 28) & 0xF))
    local type=$(((feature >> 24) & 0xF))
    case $id,$type in
        0,0)    echo -n ELECTRON ;;
        0,1)    echo -n BRILLIANCE ;;
        0,2)    echo -n PHOTON ;;
        *)      echo -n "UNKNOWN:$id,$type"
                return 1 ;;
    esac
}


# Checks that the instrument type (as recorded in the feature register) is
# compatible with the configured INST_TYPE variable.
check_instrument_type()
{
    local detected="$(probe_instrument_type)"
    [ "$INST_TYPE" = "$detected" ]  ||
        Error "Instrument $detected detected but $INST_TYPE is installed"
}


# This function probes the Libera hardware, returning a string recording the
# detected hardware type.
probe_libera()
{
    # We detect a Libera Photon by the absence of the temperature sensor on
    # I2C node 18.  This can only occur on a system with sysfs.
    if [ ! -d /sys -o -e /sys/bus/i2c/devices/0-0018 ]; then
        detect_brilliance  &&  echo -n BRILLIANCE  ||  echo -n ELECTRON
    else
        echo -n PHOTON
    fi
}
