# $Id: Makefile,v 1.14 2006/09/26 10:52:37 ales Exp $
#
# Copyright (C) 2004 Instrumentation Technologies
# See the COPYING file for copying conditions.
#
#
# GNU Makefile to build the LIBERA TIMING DAEMONS.
# If you have GNU Make installed, type 
#
#   make
#   make install
#   make clean
#
# on the command line to build and install the LIBERA TIMING DAEMONS.
# To change the default parameters, edit the configuration
# section below.
#

# 
# -------- configuration section: start --------
#

#
# TARGET: Set to family member ID.
#
export TARGET = EBPP

#
# drvdir: Where to look for Libera GNU/Linux driver .h files.
#
drvdir = ../../../driver/src/

#
# cspidir: Where to look for Libera CSPI .h files.
#
cspidir = ../../../cspi/src

#
# DEBUG: Debugging mode. Set to non-zero for debug build or
# anything else (zero or commented) for non-debug build.
# Note: CPPFLAGS is appended the DEBUG or NDEBUG flag in
# debug or non-debug build, respectively.
#
DEBUG = 0

#
# CROSS_COMPILE: Cross compiler prefix to prepend to CC.
#
# CROSS_COMPILE = arm-linux-

#
# CC: The command to invoke C compiler.
#
CC = gcc

#
# CFLAGS: Options to pass to the C compiler.
#
CFLAGS = -std=gnu99 -Wall

#
# CPPFLAGS: Options to pass to the preprocessor.
#
CPPFLAGS = -I$(drvdir) -I$(cspidir)

#
# LDFLAGS: Options to pass to the linker.
#
LDFLAGS =

#
# LIBS: Additional libs to pass to the linker.
#
LIBS = -lm

# Installation prefix
prefix=/
bindir=opt/bin/

#
# -------- configuration section: end --------
#

vpath %.h $(drvdir)

CC := $(CROSS_COMPILE)$(CC)
AR := $(CROSS_COMPILE)$(AR)


# Release version
RELEASE_VERSION := $(shell /bin/date +%Y%m%d)
CPPFLAGS += -DRELEASE_VERSION=$(RELEASE_VERSION)

# Debugging and optimization flags
ifndef DEBUG
        DEBUG = 0
endif
ifeq ($(DEBUG),0)
        CFLAGS += -O ## consider -O2
        CPPFLAGS += -DNDEBUG
else
        # "-O" is needed to expand inlines
        CFLAGS += -O -g
        CPPFLAGS += -DDEBUG=$(DEBUG)
endif
CPPFLAGS += -D$(TARGET)

# Target & sources
PLL = lmtd lstd
SRCS = lmtd.c lstd.c
OBJS = $(SRCS:%.c=%.o)

all: .depend $(PLL)

lmtd:  lmtd.o
	$(CC) $(LIBS) -o $@ $<

lstd:  lstd.o
	$(CC) -o $@ $<

install: $(PLL)
	install -d -o root -g root -m 755 $(prefix)$(bindir)
	install -c -o root -g root -m 755 $(PLL) $(prefix)$(bindir)
#	install -d -m 755 $(prefix)$(bindir)
#	install -c -m 755 $(PLL) $(prefix)$(bindir)

# SRC package
S_NAME       := $(notdir $(shell cd .. ; pwd))
S_NAME_VER   := $(S_NAME)-$(RELEASE_VERSION)
S_ARCHIVE    := $(S_NAME_VER).tar.gz
src:	clean
	@if [ ! -d ../../$(S_NAME_VER) ]; \
        then \
	    echo -e "Creating SRC package in ../../$(S_ARCHIVE)"; \
	    cd ../..; cp -a $(S_NAME) $(S_NAME_VER); \
	    $(RM) -rf `find $(S_NAME_VER) -path '*CVS' -prune`; \
	    tar cfz $(S_ARCHIVE) $(S_NAME_VER); \
	    $(RM) -rf $(S_NAME_VER) ; cd -; \
	    sync; \
	else \
	    echo -e "Cannot create SRC package: ../../$(S_NAME_VER) exists."; \
	fi


# BIN & LPM package dir
PKGDIR       := ../..


# BIN package
B_NAME       := $(S_NAME)
B_NAME_VER   := $(B_NAME)-$(RELEASE_VERSION)
B_ARCHIVE    := $(PKGDIR)/$(B_NAME_VER)-$(TARGET)-bin.tar.gz
bin:	clean all
	@$(MAKE) prefix=../tmp/$(patsubst /%,%,$(prefix)) install
	@echo -e "Creating BIN package in $(B_ARCHIVE)"; \
	cd ../tmp; tar cvfzp $(B_ARCHIVE) . ; \
	cd -; \
        $(RM) -rf ../tmp; \
	sync;

# LPM package
L_NAME       := $(S_NAME)
L_NAME_INST  := $(L_NAME)-install
L_NAME_VER   := $(L_NAME)-$(RELEASE_VERSION)
L_ARCHIVE    := $(PKGDIR)/$(L_NAME_VER)-$(TARGET).lpm
lpm: clean all
	$(MAKE) prefix=../tmp/$(patsubst /%,%,$(prefix)) install
	@echo -e "Creating LPM package in $(L_ARCHIVE)"; \
	cd ../tmp; cp ../../../../sys/src/$(L_NAME_INST) ./install ; \
	tar cvfp $(L_ARCHIVE) . ; \
	cd -; \
	$(RM) -r ../tmp; \
	sync;


clean:	dummy
	$(RM) -f $(PLL) *~
	$(RM) -f core `find . -type f -name '*.[osd]' -o -name '*~' -o \
	-name '*.out' -o -name '#*' -o -name '.#*'`
	$(RM) -f .depend
	$(RM) -rf ../tmp


dep .depend:
	$(CC) $(CPPFLAGS) -M $(SRCS) > .depend

ifeq (.depend,$(wildcard .depend))
  include .depend
endif

# False targets.
.PHONY: dummy
